# Simulaci√≥n de Carrera de F√≥rmula 1 üèéÔ∏è
**Autor:** Dar√≠o A. Uribe  

El proyecto consiste en la simulaci√≥n de un Gran Premio de F√≥rmula 1 (F1), utilizando la parrilla de la temporada 2025 (sin la participaci√≥n de Checo P√©rez üò¢).
Durante la simulaci√≥n, cada piloto compite con su respectivo monoplaza, cuyos atributos de rendimiento y fiabilidad permiten diferenciar a cada escuder√≠a y piloto, a√±adiendo realismo.

Al finalizar la carrera, los resultados se ordenan autom√°ticamente en funci√≥n del desempe√±o simulado, mostrando la clasificaci√≥n final de manera similar a un GP real. 


## Compilaci√≥n y ejecuci√≥n

Para compilar el proyecto necesitas tener instalado **g++** (parte de [MinGW](http://mingw.org/) en Windows o [GCC](https://gcc.gnu.org/) en Linux/macOS).

### Windows
g++ -Iincludes sources/*.cpp -o carrera.exe
.\carrera.exe

### Linux
g++ -Iincludes sources/*.cpp -o carrera
./carrera

### MacOS
g++ -Iincludes sources/*.cpp -o carrera
./carrera


### Primer avance

Se modelan **monoplazas** y **pilotos**, y se aplica un algoritmo de ordenamiento (**MergeSort**) para determinar la clasificaci√≥n final de la carrera en funci√≥n del **tiempo de carrera** de cada auto.


## Estructura del proyecto

- **`piloto.h`**  
  Contiene la clase `Piloto`, con atributos que representan las caracter√≠sticas de un conductor (nombre, n√∫mero, nivel de habilidad, probabilidad de error, etc.).  
  Incluye getters para acceder a estos valores.

- **`monoplaza.h`**  
  Define la clase base `Monoplaza`, que representa a un auto de F1.  
  Contiene atributos como escuder√≠a, piloto asignado, velocidad, fiabilidad y tiempo de carrera.  
  A partir de esta clase se heredan las clases hijas para cada escuder√≠a de la parrilla actual.  
  Incluye m√©todos virtuales como `correr()` para simular el desempe√±o del auto.

- **`monoplaza.cpp`**  
  Implementa la l√≥gica del c√°lculo del **tiempo de carrera** a partir de una f√≥rmula basada en atributos del piloto y del monoplaza.  
  El tiempo base de referencia proviene del registro real de Max Verstappen en un Gran Premio.

- **`main.cpp`**  
  Contiene la simulaci√≥n completa:
  1. Se crean los pilotos.  
  2. Se construyen los monoplazas y se asignan los pilotos a cada escuder√≠a.  
  3. Se simula la carrera con el m√©todo `correr()`.  
  4. Se aplica **MergeSort** para ordenar los tiempos.  
  5. Se muestran los resultados finales en consola.  

---

## Algoritmo de Ordenamiento: MergeSort

Para organizar la parrilla en funci√≥n del tiempo de carrera, se implementa el algoritmo **MergeSort**, uno de los m√°s eficientes y ampliamente utilizados en inform√°tica.  

### ¬øC√≥mo funciona?
1. **Divide y vencer√°s**  
   El arreglo de monoplazas se divide recursivamente en mitades hasta obtener subarreglos de un solo elemento.  

2. **Combinaci√≥n ordenada (Merge)**  
   La funci√≥n `merge()` compara dos subarreglos ya ordenados y los une en uno solo, eligiendo siempre el monoplaza con menor tiempo de carrera.  

3. **Resultado final**  
   Una vez que todas las divisiones se combinan, el vector queda completamente ordenado, mostrando la clasificaci√≥n de la carrera desde el primer lugar hasta el √∫ltimo.  

### Complejidad del algoritmo
- **Tiempo:**  
  - Mejor caso: O(n log n)  
  - Peor caso: O(n log n)  
  - Caso promedio: O(n log n)  
  (n = n√∫mero de monoplazas en la parrilla).  

- **Espacio:**  
  O(n), ya que se crean arreglos temporales (`L` y `R`) para realizar el proceso de merge.  

### Ventajas
- Estable: mantiene el orden relativo de elementos iguales.  
- Eficiente incluso en el peor caso.  

### ¬øQu√© sigue?  
Me gustar√≠a hacer la simulaci√≥n m√°s realista incorporando nuevas caracter√≠sticas, como la inclusi√≥n de un Safety Car, la posibilidad de mostrar las posiciones vuelta por vuelta en lugar de solo al final, y mejorar el formato de salida para que los resultados sean m√°s claros y atractivos visualmente.
